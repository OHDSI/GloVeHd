// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// buildMatrix
S4 buildMatrix(const List& conceptData, const DataFrame& observationPeriodReference, const std::vector<double>& weights, const int windowSize, const int context, const std::vector<double>& conceptIds);
RcppExport SEXP _GloVeHd_buildMatrix(SEXP conceptDataSEXP, SEXP observationPeriodReferenceSEXP, SEXP weightsSEXP, SEXP windowSizeSEXP, SEXP contextSEXP, SEXP conceptIdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type conceptData(conceptDataSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type observationPeriodReference(observationPeriodReferenceSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type windowSize(windowSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type context(contextSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type conceptIds(conceptIdsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildMatrix(conceptData, observationPeriodReference, weights, windowSize, context, conceptIds));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GloVeHd_buildMatrix", (DL_FUNC) &_GloVeHd_buildMatrix, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_GloVeHd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
